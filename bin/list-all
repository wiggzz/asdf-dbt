#!/usr/bin/env bash
set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# shellcheck source=../lib/utils.bash
source "$SCRIPT_DIR/../lib/utils.bash"

fetch_core_versions() {
  if [[ -n "${ASDF_DBT_CORE_VERSIONS_PATH:-}" ]]; then
    cat "$ASDF_DBT_CORE_VERSIONS_PATH"
    return
  fi

  if [[ -n "${ASDF_DBT_CORE_VERSIONS_URL:-}" ]]; then
    curl -fsSL "$ASDF_DBT_CORE_VERSIONS_URL" || return 1
    return
  fi

  local py
  py="$(get_python_bin)"

  "$py" - <<'PY'
import json
import sys
import urllib.request

url = "https://pypi.org/pypi/dbt-core/json"
try:
    with urllib.request.urlopen(url, timeout=10) as resp:
        data = json.load(resp)
except Exception as exc:  # pragma: no cover
    print(exc, file=sys.stderr)
    sys.exit(1)

versions = data.get("releases", {}).keys()
for version in sorted(versions, key=lambda v: tuple(int(x) if x.isdigit() else x for x in v.split('.'))):
    print(version)
PY
}

fetch_fusion_versions() {
  local manifest_path
  manifest_path="$(fusion_manifest_path)"
  trap 'cleanup_temp_manifest "$manifest_path"' RETURN

  local py
  py="$(get_python_bin)"

  "$py" - "$manifest_path" <<'PY'
import json
import sys
from pathlib import Path

manifest = Path(sys.argv[1])
try:
    data = json.loads(manifest.read_text())
except Exception as exc:
    print(exc, file=sys.stderr)
    sys.exit(1)

versions = data.get("versions", {})
for key in sorted(versions):
    print(key)
PY
}

main() {
  local core_versions fusion_versions
  core_versions="$(fetch_core_versions || true)"
  fusion_versions="$(fetch_fusion_versions || true)"

  if [[ -n "$fusion_versions" ]]; then
    while IFS= read -r version; do
      [[ -z "$version" ]] && continue
      echo "fusion-$version"
    done <<< "$fusion_versions"
  fi

  if [[ -n "$core_versions" ]]; then
    while IFS= read -r version; do
      [[ -z "$version" ]] && continue
      echo "core-$version"
    done <<< "$core_versions"
  fi
}

main "$@"

